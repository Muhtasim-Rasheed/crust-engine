{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Crust","text":"<p>Welcome to the documentation for \u2728 Crust \u2728 - a Scratch-like game development tool with its own programming language, also named Crust.</p>"},{"location":"#what-is-crust","title":"What is Crust?","text":"<p>Crust is a game development tool that allows users to create games using text-based programming instead unlike Scratch. Main features include but are not limited to:</p> <ul> <li>Text-based programming language</li> <li>A lot of functions from Scratch</li> <li>Runs at a smooth 60 FPS instead of 30 FPS in Scratch</li> <li>Supports all major platforms (Windows, macOS, Linux) except mobile</li> <li>Open-source and free to use</li> </ul>"},{"location":"#example","title":"Example","text":"<pre><code>debug_options = []\n\n[stage]\nbackdrops = [ \"backdrop_0.png\" ]\n\n[[sprites]]\nname = \"example\"\ncode = \"example.crst\"\nsounds = []\ncostumes = []\nx = 0\ny = 0\nw = 1\nh = 1\n</code></pre> <pre><code>// This is a simple Crust program that draws a blue circle on the screen\n\nsetup {}\n\nupdate {\n    set_color(0, 0, 255) // Set color to blue\n    circle(100, 100, 50) // Draw a circle at (100, 100) with a radius of 50\n}\n</code></pre> <p>The output:</p> <p></p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you want to contribute to Crust or want to report a bug, please visit our GitHub repository.</p>"},{"location":"#license","title":"License","text":"<p>Crust is licensed under the GNU GPLv3. You can use, modify, and distribute it under the terms of this license.</p>"},{"location":"control/","title":"Control Functions","text":"<p>Most of the control functions are block statements and explained in the Crust Language page. Here is a list of all the control functions in Crust:</p> <ul> <li><code>wait(time)</code>: Waits for the specified time in seconds before continuing to the next block.</li> <li><code>stop(option)</code>: Stops the current script. The <code>option</code> can be <code>all</code>, <code>this</code>, <code>script</code>, <code>other-scripts</code>, or <code>other-sprites-and-scripts</code>:<ul> <li><code>all</code>: Stops all scripts in all sprites.</li> <li><code>this</code>: Stops all scripts in the current sprite.</li> <li><code>script</code>: Stops the current script.</li> <li><code>other-scripts</code>: Stops all scripts in the current sprite.</li> <li><code>other-sprites-and-scripts</code>: Stops all scripts in all sprites and all scripts in the current sprite except the current script.</li> </ul> </li> <li><code>clone()</code>: Creates a clone of the sprite. The clone will execute the <code>clone_setup</code> and <code>clone_update</code> blocks.</li> <li><code>delete_clone()</code>: Deletes the current clone. This function is typically called within the <code>clone_update</code> block to remove the clone when it is no longer needed.</li> <li><code>delete_clone(cloneid)</code>: Deletes the specified clone. The <code>cloneid</code> is the ID of the clone to delete, which starts from 1 and increments for each clone created.</li> <li><code>skip_further_execution_if(bool)</code>: Skips the execution of the current script if the condition is true.</li> </ul> <p>This page is so short unlike others...</p>"},{"location":"crust-language/","title":"Crust (The Programming Language)","text":""},{"location":"crust-language/#what-is-crust-the-programming-language","title":"What is Crust (The programming language)?","text":"<p>Crust is Crust's programming language, and it's syntax is similar to Rust. Crust is also coded in Rust, which makes it blazing fast. Crust is a text-based programming language, unlike Scratch, which uses blocks. Crust is designed to be easy to learn and use, while also being powerful enough to create complex games. Crust programs are written in <code>.crst</code> files, which are plain text files that can be edited with any text editor.</p>"},{"location":"crust-language/#crust-datatypes","title":"Crust Datatypes","text":"<p>There are 6 main datatypes in Crust:</p> <ul> <li><code>Null</code>: A null value, useful if you want to set a variable to nothing. Example: <code>null</code></li> <li><code>Number</code>: A number, can be an integer or a float. Example: <code>42</code>, <code>3.14</code>, <code>0xFF</code> (hexadecimal), <code>0b1010</code> (binary), <code>0o755</code> (octal)</li> <li><code>String</code>: A string of characters, enclosed in double quotes. Example: <code>\"Hello, world!\"</code></li> <li><code>Boolean</code>: A boolean value, can be either <code>true</code> or <code>false</code>. Example: <code>true</code>, <code>false</code></li> <li><code>List</code>: A list of values, enclosed in square brackets. Example: <code>[1, 2, 3]</code>, <code>[\"apple\", \"banana\", \"cherry\"]</code></li> <li><code>Object</code>: An object, which is a collection of key-value pairs. Example: <code>{ name: \"John\", age: 30 }</code></li> <li><code>Closure</code>: A closure is a function but as a value. Example: <code>fn (x, y) result { result = x + y }</code></li> </ul>"},{"location":"crust-language/#crust-statements","title":"Crust Statements","text":"<p>Crust statements are basically Scratch blocks, but in text form. Crust statements are mainly inline or block statements.</p>"},{"location":"crust-language/#inline-statements","title":"Inline Statements","text":"<p>Inline statements are single-line statements that perform a specific action. They can be used to assign values, call functions, or import files. There are 6 inline statements in Crust:</p> <ul> <li><code>variable = value</code>: Assigns a value to a variable. Example: <code>x = 42</code>. Variables can change their datatype at any time.</li> <li><code>global variable = value</code>: Assigns a value to a global variable. Global variables can be accessed from any sprite. Example: <code>global score = 0</code></li> <li><code>nop</code>: Does absolutely nothing.</li> <li><code>assert condition</code>: Checks if the condition is true, and if not, it throws an error. Example: <code>assert x &gt; 0</code></li> <li><code>function_name(arguments)</code>: Calls a function or a closure with the given arguments. Example: <code>goto(\"mouse\")</code></li> </ul> <p>Note</p> <p>Closures can be put inside of lists, and calling them looks like this: <code>list[0](1, 2)</code>. This calls the closure at index 0 of the list with the arguments 1 and 2. Another example is <code>object.key(1, 2)</code>, which calls the closure at the key <code>key</code> of the object with the arguments 1 and 2.</p> <ul> <li><code>import \"file.crst\"</code>: Imports a Crust file. The file can contain functions and variables. Import statements are defined at the head of the program. Example: <code>import \"utils.crst\"</code></li> </ul> <p>To assign a list's or object's value, you can use the following syntax:</p> <ul> <li><code>list[index] = value</code>: Assigns a value to a specific index in a list. Example: <code>my_list[0] = \"apple\"</code></li> <li><code>object[\"key\"] = value</code>: Assigns a value to a specific key in an object. Example: <code>my_object[\"name\"] = \"John\"</code></li> </ul> <p>Note</p> <p>As of 0.3.2, the syntax <code>list.0</code> and <code>object.name</code> are supported.</p>"},{"location":"crust-language/#block-statements","title":"Block Statements","text":"<p>Block statements are multi-line statements that perform a many actions in one go. They are used to define functions, loops, and conditionals. Block statements are enclosed in curly braces <code>{}</code>. There are 10 block statements in Crust:</p> <ul> <li><code>setup { ... }</code>: The setup block is executed once at the start of the program. It is used to initialize variables and set up the game environment.   In library files, variable assignments are appended to the importing file from the setup block. Everything else is ignored.</li> <li><code>update { ... }</code>: The update block is executed every frame, and is used to update the game state, handle input, and draw graphics. Libraries ignore the update block.</li> <li><code>match expression { ... }</code>: The match block is used to match an expression against multiple patterns. It is similar to a switch statement in other languages. It may also contain an else block, which is executed if no patterns match. Example: <pre><code>os = \"Linux\"\nmatch os {\n    \"Windows\": { print(\"You probably like gaming.\") }\n    \"Linux\": { print(\"You probably like programming.\") }\n    \"macOS\": { print(\"You probably like design.\") }\n} else { print(\"Hello, stranger!\") } # no offence to FreeBSD users\n</code></pre></li> <li><code>if condition { ... }</code>: Executes the block if the condition is true. Example: <code>if x &gt; 0 { print(\"x is positive\") }</code></li> <li><code>if condition { ... } else { ... }</code>: Executes the first block if the condition is true, otherwise executes the second block. Example: <code>if x &gt; 0 { print(\"x is positive\") } else { print(\"x is negative or zero\") }</code></li> <li><code>if condition { ... } else if condition { ... } else { ... }</code>: Executes the first block if the first condition is true, otherwise checks the second condition, and so on. Example:  <pre><code>if x &gt; 0 {\n  print(\"x is positive\")\n} else if x &lt; 0 {\n  print(\"x is negative\")\n} else {\n  print(\"x is zero\")\n}\n</code></pre></li> <li><code>while condition { ... }</code>: Executes the block repeatedly while the condition is true. Example: <code>while x &lt; 10 { x += 1 }</code></li> <li><code>for variable in iterable { ... }</code>: Iterates over the values in the iterable (list or object) and executes the block for each value. Example:  <pre><code>for item in range(5) {\n    print(item)\n}\n</code></pre></li> <li><code>clone_setup { ... }</code>: The clone setup block is executed once for each clone of a sprite. It is used to initialize variables and set up the clone's state. Libraries ignore the clone setup block.</li> <li><code>clone_update { ... }</code>: The clone update block is executed every frame for each clone of a sprite. It is used to update the clone's state and draw graphics. Libraries ignore the clone update block.</li> <li><code>when broadcast { ... }</code> and <code>when boolean { ... }</code>: Executes the block when the specified broadcast message is received or when the boolean expression evaluates to true for the first time. Example:  <pre><code>when \"start_game\" {\n    print(\"Game started!\")\n}\nwhen x &gt; 0 {\n    print(\"x just turned positive!\")\n}\n</code></pre></li> <li><code>fn function_name(arguments) return { ... }</code>: Defines a function with the given name and arguments. The function can be called later using <code>function_name(arguments)</code>. Example:  <pre><code>fn add(a, b) result {\n    result = a + b\n}\n</code></pre></li> </ul> <p>Note</p> <p>No <code>return</code> statement exists, and the return is embedded in the function header. The function can return a value by assigning it to the <code>result</code> variable.</p>"},{"location":"crust-language/#tag-code","title":"Tag Code","text":"<p>Tags are a way to group sprites together and share code between them. Tags can be used to define common behavior for a group of sprites, where the sprite inherits the tag's code placing the tag's code after its own code. Tags are defined in the <code>project.toml</code> file. For help defining tags, see the project setup guide.</p> <p>Tag code is just like normal Crust sprite code, but instead of being executed, it is appended to the tag's sprites' code. This allows you to define common behavior for a group of sprites without duplicating code. All root-level statements (<code>setup</code>, <code>update</code>, <code>clone_setup</code>, <code>clone_update</code>, <code>when</code>, and <code>fn</code>) work normally.</p>"},{"location":"crust-language/#expressions","title":"Expressions","text":"<p>Expressions evaluate to a value and can be used in inline statements or block statements. There are 6 types of expressions in Crust:</p> <ul> <li><code>Value</code>: A value can be a number, string, boolean, list, or object. Example: <code>42</code>, <code>\"Hello\"</code>, <code>true</code>, <code>[1, 2, 3]</code>, <code>{ name: \"John\" }</code></li> <li><code>Identifier</code>: An identifier is a variable's name. It can be used to access the value of a variable. Example: <code>x</code>, <code>my_list</code>, <code>my_object</code></li> <li><code>List Member Access</code>: Accesses a specific index in a list. Example: <code>my_list[0]</code>, <code>my_list[1]</code>. Can also be an object key access, which accesses a specific key in an object. Example: <code>my_object[\"name\"]</code>, <code>my_object[\"age\"]</code></li> <li><code>Binary</code>: A binary expression is an expression that combines two values using an operator. Example: <code>x + y</code>, <code>a &lt; b</code>, <code>list1 == list2</code>, <code>object1 != object2</code></li> <li><code>Unary</code>: A unary expression is an expression that applies an operator to a single value. Example: <code>-x</code>, <code>!true</code></li> <li><code>Function Call</code>: A function call is an expression that calls a function with the given arguments. Action functions are different from Expression functions, as they do not return a value.     Examples of action functions are <code>move(10)</code>, <code>turn_cw(90)</code>, and <code>set_color(255, 0, 0)</code>. Examples of expression functions are <code>x()</code>, <code>y()</code>, and <code>direction()</code>.</li> </ul>"},{"location":"drawing/","title":"Drawing Functions","text":"<p>The drawing functions are used to draw shapes and lines on the screen unlike in Scratch where you have to move a pen. They can be used to create graphics, animations, and more. It also lets you stamp the sprite onto the stage. Here is a list of all the drawing functions in Crust:</p> <ul> <li><code>set_color(r, g, b)</code>: Sets the drawing color to the specified RGB values. The values are in the range of 0 to 255.</li> <li><code>change_r(increment)</code>: Changes the red component of the drawing color by the specified increment. The increment can be positive or negative.</li> <li><code>change_g(increment)</code>: Changes the green component of the drawing color by the specified increment. The increment can be positive or negative.</li> <li><code>change_b(increment)</code>: Changes the blue component of the drawing color by the specified increment. The increment can be positive or negative.</li> <li><code>line(x1, y1, x2, y2, thickness)</code>: Draws a line from the point <code>(x1, y1)</code> to the point <code>(x2, y2)</code> with the specified thickness.</li> <li><code>rect(x1, y1, x2, y2)</code>: Draws a rectangle with the top-left corner at <code>(x1, y1)</code> and the bottom-right corner at <code>(x2, y2)</code>. The rectangle is filled with the current drawing color.</li> <li><code>hrect(x1, y1, x2, y2, thickness)</code>: Draws a hollow rectangle with the top-left corner at <code>(x1, y1)</code> and the bottom-right corner at <code>(x2, y2)</code> with the specified thickness. The rectangle is outlined with the current drawing color.</li> <li><code>circle(x, y, radius)</code>: Draws a filled circle with the center at <code>(x, y)</code> and the specified radius. The circle is filled with the current drawing color.</li> <li><code>hcircle(x, y, radius, thickness)</code>: Draws a hollow circle with the center at <code>(x, y)</code> and the specified radius with the specified thickness. The circle is outlined with the current drawing color.</li> <li><code>ellipse(x, y, width, height)</code>: Draws a filled ellipse with the center at <code>(x, y)</code> and the specified width and height. The ellipse is filled with the current drawing color.</li> <li><code>ellipse(x, y, width, height, rotation)</code>: Draws a filled ellipse with the center at <code>(x, y)</code>, the specified width and height, and the specified rotation in degrees. The ellipse is filled with the current drawing color.</li> <li><code>hellipse(x, y, width, height, thickness)</code>: Draws a hollow ellipse with the center at <code>(x, y)</code>, the specified width and height, and the specified thickness. The ellipse is outlined with the current drawing color.</li> <li><code>hellipse(x, y, width, height, rotation, thickness)</code>: Draws a hollow ellipse with the center at <code>(x, y)</code>, the specified width and height, the specified rotation in degrees, and the specified thickness. The ellipse is outlined with the current drawing color.</li> <li><code>polygon(xs, ys)</code>: Draws a filled polygon with the specified vertices. The polygon is filled with the current drawing color.</li> <li><code>hpolygon(thickness, xs, ys)</code>: Draws a hollow polygon with the specified vertices and thickness. The polygon is outlined with the current drawing color.</li> <li><code>text(x, y, text, font_size)</code>: Draws the specified text at the position <code>(x, y)</code> with the specified font size. The text is drawn with the current drawing color.</li> <li><code>textured_tri(parse_image_result, xs, ys, us, vs)</code>: Draws a textured triangle using the specified vertices and texture coordinates. The <code>parse_image_result</code> is the result from the <code>parse_image()</code> function.</li> <li><code>stamp()</code>: Stamps the sprite onto the stage at its current position. The stamp is a copy of the sprite's current appearance, effects included.</li> <li><code>clear_all_stamps()</code>: Clears all the stamps on the stage.</li> <li><code>r()</code>: Returns the current red component of the drawing color.</li> <li><code>g()</code>: Returns the current green component of the drawing color.</li> <li><code>b()</code>: Returns the current blue component of the drawing color.</li> </ul> <p>Note</p> <p>The drawing functions draw in world coordinates, not screen coordinates. The origin <code>(0, 0)</code> is at the center of the screen, with positive x values to the right and positive y values upwards.</p>"},{"location":"events/","title":"Event Functions","text":"<p>The event functions are used to handle events in the project. They can be used to respond to user input, collisions, and other events. Here is a list of all the event functions in Crust:</p> <ul> <li><code>key_down(key)</code>: Returns <code>true</code> if the specified key is currently pressed down.</li> <li><code>key_pressed(key)</code>: Returns <code>true</code> if the specified key was pressed down in the current frame.</li> <li><code>key_released(key)</code>: Returns <code>true</code> if the specified key was released in the current frame.</li> <li><code>last_key()</code>: Returns the last key that was pressed down. If no key was pressed down, it returns <code>null</code>.</li> <li><code>combination_pressed(keys...)</code>: Returns <code>true</code> if the specified combination of keys was pressed down in order. Fires only once when the combination is pressed, not every frame.</li> <li><code>mouse_button_down(button)</code>: Returns <code>true</code> if the specified mouse button is currently pressed down.</li> <li><code>mouse_button_pressed(button)</code>: Returns <code>true</code> if the specified mouse button was pressed down in the current frame.</li> <li><code>mouse_button_released(button)</code>: Returns <code>true</code> if the specified mouse button was released in the current frame.</li> <li><code>sprite_clicked()</code>: Returns <code>true</code> if the sprite was clicked in the current frame.</li> <li><code>is_backdrop(backdrop)</code>: Returns <code>true</code> if the current backdrop is the specified backdrop. The backdrop is specified by its index in the stage's backdrop list, starting from 0.</li> <li><code>broadcast_id_of(broadcast)</code>: Returns the ID of the specified broadcast.</li> <li><code>broadcast(broadcast)</code>: Broadcasts the specified message to all sprites. The broadcast message is specified by its name.</li> </ul>"},{"location":"events/#keys","title":"Keys","text":"<p>The keys that can be used in the <code>key_down</code>, <code>key_pressed</code>, and <code>key_released</code> functions are:</p> <ul> <li><code>\"a\" - \"z\"</code>: The letters A to Z.</li> <li><code>\"0\" - \"9\"</code>: The numbers 0 to 9.</li> <li><code>\"`\"</code>: The backtick / grave accent key.</li> <li><code>\"-\"</code>: The minus key.</li> <li><code>\"=\"</code>: The equals key.</li> <li><code>\"(\"</code>: The left parenthesis key.</li> <li><code>\")\"</code>: The right parenthesis key.</li> <li><code>\"\\\"</code>: The backslash key.</li> <li><code>\"/\"</code>: The forward slash key.</li> <li><code>\";\"</code>: The semicolon key.</li> <li><code>\"'\"</code>: The single quote key.</li> <li><code>\",\"</code>: The comma key.</li> <li><code>\".\"</code>: The period key.</li> <li><code>\"lctrl\"</code>: The left control key.</li> <li><code>\"rctrl\"</code>: The right control key.</li> <li><code>\"lshift\"</code>: The left shift key.</li> <li><code>\"rshift\"</code>: The right shift key.</li> <li><code>\"lalt\"</code>: The left alt key.</li> <li><code>\"ralt\"</code>: The right alt key.</li> <li><code>\"lsuper\"</code>: The left super key (Windows key / Command key).</li> <li><code>\"rsuper\"</code>: The right super key (Windows key / Command key) (who even uses this?).</li> <li><code>\"tab\"</code>: The tab key.</li> <li><code>\"del\"</code>: The delete key.</li> <li><code>\"back\"</code>: The backspace key.</li> <li><code>\"left\"</code>: The left arrow key.</li> <li><code>\"right\"</code>: The right arrow key.</li> <li><code>\"up\"</code>: The up arrow key.</li> <li><code>\"down\"</code>: The down arrow key.</li> <li><code>\"space\"</code>: The space key.</li> <li><code>\"enter\"</code>: The enter key.</li> <li><code>\"esc\"</code>: The escape key.</li> </ul>"},{"location":"events/#mouse-buttons","title":"Mouse buttons","text":"<p>The mouse buttons that can be used in the <code>mouse_button_down</code>, <code>mouse_button_pressed</code>, and <code>mouse_button_released</code> functions are:</p> <ul> <li><code>\"left\"</code>: The left mouse button.</li> <li><code>\"middle\"</code>: The middle mouse button (usually the scroll wheel).</li> <li><code>\"right\"</code>: The right mouse button.</li> </ul>"},{"location":"license/","title":"GNU GPLv3 License","text":"<pre><code>                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n</code></pre>"},{"location":"looks/","title":"Looks Functions","text":"<p>The looks functions are used to change the appearance of sprites and backdrops. They can be used to change costumes, backdrops, sizes, effects, and more. Here is a list of all the looks functions in Crust:</p> <ul> <li><code>hide()</code>: Hides the sprite. The sprite will not be visible.</li> <li><code>show()</code>: Shows the sprite. The sprite will be visible.</li> <li><code>say(string, time)</code>: Makes the sprite say the specified string for the specified time in seconds. The string is displayed above the sprite.</li> <li><code>say(string)</code>: Makes the sprite say the specified string indefinitely until another <code>say</code> or <code>think</code> block is called.</li> <li><code>think(string, time)</code>: Makes the sprite think the specified string for the specified time in seconds. The string is displayed above the sprite. The text is 30% transparent.</li> <li><code>think(string)</code>: Makes the sprite think the specified string indefinitely until another <code>say</code> or <code>think</code> block is called.</li> <li><code>switch_costume(costume)</code>: Switches the sprite's costume to the specified costume. The costume is specified by its index in the sprite's costume list, starting from 0.</li> <li><code>next_costume()</code>: Switches the sprite to the next costume in the sprite's costume list. If the sprite is already on the last costume, it wraps around to the first costume.</li> <li><code>previous_costume()</code>: Switches the sprite to the previous costume in the sprite's costume list. If the sprite is already on the first costume, it wraps around to the last costume.</li> <li><code>switch_backdrop(backdrop)</code>: Switches the backdrop to the specified backdrop. The backdrop is specified by its index in the stage's backdrop list, starting from 0.</li> <li><code>next_backdrop()</code>: Switches the stage to the next backdrop in the stage's backdrop list. If the stage is already on the last backdrop, it wraps around to the first backdrop.</li> <li><code>previous_backdrop()</code>: Switches the stage to the previous backdrop in the stage's backdrop list. If the stage is already on the first backdrop, it wraps around to the last backdrop.</li> <li><code>change_scale(increment)</code>: Changes the sprite's scale by the specified increment. The scale is a percentage of the original size, where 100% is the original size.</li> <li><code>set_scale(scale)</code>: Sets the sprite's scale to the specified value. The scale is a percentage of the original size, where 100% is the original size.</li> <li><code>change_effect(effect, increment)</code>: Changes the specified effect by the specified increment</li> <li><code>set_effect(effect, value)</code>: Sets the specified effect to the specified value.</li> <li><code>clear_effects()</code>: Clears all effects applied to the sprite.</li> <li><code>clear_effect(effect)</code>: Clears the specified effect applied to the sprite.</li> <li><code>go_to_layer(layer)</code>: Moves the sprite to the specified layer.</li> <li><code>go_by_layers(\"forward\" | \"backward\", steps)</code>: Moves the sprite by the specified number of layers in the specified direction.<ul> <li><code>\"forward\"</code>: Moves the sprite forward by the specified number of layers.</li> <li><code>\"backward\"</code>: Moves the sprite backward by the specified number of layers.</li> </ul> </li> <li><code>costume()</code>: Returns the current costume</li> <li><code>backdrop()</code>: Returns the current backdrop</li> <li><code>size()</code>: Returns the current size of the sprite.</li> <li><code>scale()</code>: Returns the current scale modifier of the sprite.</li> <li><code>bounds()</code>: Returns the bounds of the sprite as a list <code>[x, y, width, height]</code>, where <code>(x, y)</code> is the top-left corner of the sprite.</li> <li><code>layer()</code>: Returns the current layer of the sprite.</li> <li><code>effect(effect)</code>: Returns the current value of the specified effect applied to the sprite. The effect can be one of the valid effects listed below.</li> </ul>"},{"location":"looks/#effects","title":"Effects","text":"<p>All the valid effects that can be used are:</p> <ul> <li><code>\"brightness\"</code>: Changes the brightness of the sprite.</li> <li><code>\"ghost\"</code>: Changes the transparency of the sprite.</li> <li><code>\"hue\"</code>: Changes the hue of the sprite.</li> <li><code>\"saturation\"</code>: Changes the saturation of the sprite.</li> <li><code>\"sepia\"</code>: Changes the sepia effect of the sprite.</li> <li><code>\"grayscale-averaged\"</code>: Changes the grayscale effect of the sprite, using the average method.</li> <li><code>\"grayscale-weighted\"</code>: Changes the grayscale effect of the sprite, using the weighted method.</li> <li><code>\"invert\"</code>: Inverts the colors of the sprite.</li> <li><code>\"multiply\"</code>: Multiplies the RGB excluding transparency of the sprite by the specified value.</li> <li><code>\"multiply-r\"</code>: Multiplies the red channel of the sprite by the specified value.</li> <li><code>\"multiply-g\"</code>: Multiplies the green channel of the sprite by the specified value.</li> <li><code>\"multiply-b\"</code>: Multiplies the blue channel of the sprite by the specified value.</li> <li><code>\"multiply-a\"</code>: Multiplies the transparency channel of the sprite by the specified value.</li> <li><code>\"add\"</code>: Adds the specified value to the RGB excluding transparency of the sprite.</li> <li><code>\"add-r\"</code>: Adds the specified value to the red channel of the sprite.</li> <li><code>\"add-g\"</code>: Adds the specified value to the green channel of the sprite.</li> <li><code>\"add-b\"</code>: Adds the specified value to the blue channel of the sprite.</li> <li><code>\"add-a\"</code>: Adds the specified value to the transparency channel of the sprite.</li> </ul>"},{"location":"misc/","title":"Miscellaneous Functions","text":"<p>The miscellaneous functions do not fit into any other category. They are used for various purposes, such as debugging, math, and others. This is the biggest category in Crust, and it contains a lot of functions. Here is a list of all the miscellaneous functions in Crust:</p> <ul> <li><code>args()</code>: Returns the command line arguments passed to the program.</li> <li><code>print(values...)</code>: Prints the given values to the console. Can take multiple values, separated by commas.</li> <li><code>print_raw(values...)</code>: Prints the given values to the console without the automatic newline at the end and the name of the sprite. Can take multiple values, separated by commas.</li> <li><code>input(prompt)</code>: Prompts the user for input and returns the input as a string. The prompt is displayed in the console.</li> <li><code>time()</code>: Returns the current time in seconds since the program started.</li> <li><code>abs(num)</code>: Returns the absolute value of the given number.</li> <li><code>sqrt(num)</code>: Returns the square root of the given number.</li> <li><code>sin(num)</code>: Returns the sine of the given number (in radians).</li> <li><code>cos(num)</code>: Returns the cosine of the given number (in radians).</li> <li><code>tan(num)</code>: Returns the tangent of the given number (in radians).</li> <li><code>asin(num)</code>: Returns the arcsine of the given number (in radians).</li> <li><code>acos(num)</code>: Returns the arccosine of the given number (in radians).</li> <li><code>atan(num)</code>: Returns the arctangent of the given number (in radians).</li> <li><code>lerp(a, b, t)</code>: Returns the linear interpolation between <code>a</code> and <code>b</code> at <code>t</code>, where <code>t</code> is a value between 0 and 1.</li> <li><code>property_of(sprite, property)</code>: Returns the value of the given property of the sprite. The property can be the following:<ul> <li><code>name</code>: The name of the sprite. (Not sure why anyone would use this, but it's here.)</li> <li><code>x</code>: The x-coordinate of the sprite.</li> <li><code>y</code>: The y-coordinate of the sprite.</li> <li><code>size</code>: The size of the sprite, which is a list [width, height].</li> <li><code>scale</code>: The scale of the sprite, which is a number where 1.0 is 100% scale.</li> <li><code>direction</code>: The direction of the sprite in degrees.</li> <li><code>completed_broadcasts</code>: A list of broadcast IDs that have been completed by the sprite.</li> <li><code>tags</code>: A list of tags that the sprite is in.</li> </ul> </li> <li><code>to_rad(deg)</code>: Converts the given angle in degrees to radians.</li> <li><code>to_deg(rad)</code>: Converts the given angle in radians to degrees.</li> <li><code>set_cam()</code>: Sets the camera's 0, 0 position to the sprite's current position.</li> <li><code>set_cam(x, y)</code>: Sets the camera's 0, 0 position to the given coordinates <code>(x, y)</code>.</li> <li><code>set_cam(x, y, zoom_x, zoom_y)</code>: Sets the camera's 0, 0 position to the given coordinates <code>(x, y)</code> and sets the zoom level to <code>(zoom_x, zoom_y)</code>. The zoom level is a number where 100 is 100% zoom.</li> <li><code>set_cam(x, y, zoom_x, zoom_y, rotation)</code>: Sets the camera's 0, 0 position to the given coordinates <code>(x, y)</code>, sets the zoom level to <code>(zoom_x, zoom_y)</code>, and sets the rotation of the camera in degrees.</li> <li><code>clamp(value, min, max)</code>: Clamps the given value between the minimum and maximum values.</li> <li><code>len(list | string)</code>: Returns the length of the given list or string.</li> <li><code>keys(object)</code>: Returns a list of keys in the given object.</li> <li><code>values(object)</code>: Returns a list of values in the given object.</li> <li><code>random(min, max)</code>: Returns a random number between the given minimum and maximum values.</li> <li><code>distance(x1, y1, x2, y2)</code>: Returns the distance between the two points <code>(x1, y1)</code> and <code>(x2, y2)</code>.</li> <li><code>distance_to(x, y)</code>: Returns the distance from the sprite to the point <code>(x, y)</code>.</li> <li><code>distance_to(spritename | \"mouse\")</code>: Returns the distance from the sprite to the other sprite or the mouse.</li> <li><code>write(content)</code>: Exports the given content to a file. The file is created in a the <code>exports</code> directory in the project root.</li> <li><code>write(content, path)</code>: Exports the given content to a file at the specified path. The path is relative to the project root.</li> <li><code>read(path)</code>: Imports a Crust file at the specified path. The path is relative to the project root.</li> <li><code>read_binary(path)</code>: Imports a binary file at the specified path. The path is relative to the project root.</li> <li><code>parse_image(binary)</code>: Parses the given binary data as an image and returns a list [width, height, pixels]. The pixels are a list of RGBA values in the format [r, g, b, a].</li> <li><code>set_uv(u, v, w, x)</code>: Sets the UV coordinates for the sprite, where uv is bottom-left and wx is top-right. Can be used for atlases where theres no need for extra costumes.</li> <li><code>screenshot()</code>: Takes a screenshot of the current screen and saves it to the <code>exports</code> directory in the project root.</li> <li><code>screenshot(path)</code>: Takes a screenshot of the current screen and saves it to the specified path. The path is relative to the project root.</li> <li><code>typeof(value)</code>: Returns the type of the given value as a string.</li> <li><code>list_with_capacity(capacity)</code>: Returns a list with capacity for values.</li> <li><code>push(list, value)</code>: Pushes the given value to the end of the list and returns the new list.</li> <li><code>pop(list)</code>: Pops the last value from the list and returns a list containing the new list and the popped value.</li> <li><code>insert(list, index, value)</code>: Inserts the given value at the specified index in the list and returns the new list.</li> <li><code>insert(object, key, value)</code>: Inserts the given key-value pair into the object and returns the new object.</li> <li><code>remove(list, index)</code>: Removes the value at the specified index from the list and returns a list containing the new list and the removed value.</li> <li><code>extend(list1, list2)</code>: Extends the first list with the second list and returns the new list.</li> <li><code>contains(list, value)</code>: Returns true if the list contains the given value, false otherwise.</li> <li><code>contains(object, key)</code>: Returns true if the object contains the given key, false otherwise.</li> <li><code>sort(list, closure)</code>: Sorts the list using the given closure as the comparison function. The closure should take two arguments and return a boolean.</li> <li><code>filter(list, closure)</code>: Filters the list using the given closure. The closure should take one argument and return a boolean.</li> <li><code>map(list, closure)</code>: Iterates over the list and applies the given closure to each element, returning a new list with the results. The closure should take one argument and return a value.</li> <li><code>split(string, delimiter)</code>: Splits the given string by the specified delimiter and returns a list of substrings.</li> <li><code>join(list, delimiter)</code>: Joins the elements of the list into a single string, separated by the specified delimiter.</li> <li><code>starts_with(string, prefix)</code>: Returns true if the given string starts with the specified prefix, false otherwise.</li> <li><code>ends_with(string, suffix)</code>: Returns true if the given string ends with the specified suffix, false otherwise.</li> <li><code>trim(string)</code>: Trims the whitespace from the beginning and end of the given string and returns the trimmed string.</li> <li><code>range(end)</code>: Returns a list of numbers from 0 to <code>end - 1</code>.</li> <li><code>range(start, end)</code>: Returns a list of numbers from <code>start</code> to <code>end - 1</code>.</li> <li><code>range(start, end, step)</code>: Returns a list of numbers from <code>start</code> to <code>end - 1</code>, incrementing by <code>step</code>.</li> <li><code>to_string(value)</code>: Converts the given value to a string.</li> <li><code>to_string(number, base)</code>: Converts the given decimal number to a string in the specified base (2 to 36).</li> <li><code>to_number(value)</code>: Converts the given value to a number.</li> <li><code>to_boolean(value)</code>: Converts the given value to a boolean.</li> <li><code>to_list(value)</code>: Converts the given value to a list.</li> <li><code>to_object(value)</code>: Converts the given value to an object.</li> <li><code>whoami()</code>: Returns the name of the current sprite. Works for clones as well.</li> <li><code>clone_id()</code>: Returns the ID of the current clone. Returns 0 if the sprite is not a clone.</li> <li><code>frame()</code>: Returns the current frame number. Starts at 0.</li> <li><code>delta_time()</code>: Returns the time in seconds since the last frame. Can be used to calculate the frame rate or to create smooth animations.</li> </ul>"},{"location":"motion/","title":"Motion Functions","text":"<p>The motion functions are used to move sprites around the screen. They can be used to create animations, move sprites to specific positions, and more. Here is a list of all the motion functions in Crust:</p> <ul> <li><code>move(steps)</code>: Moves the sprite forward by the specified number of steps. The direction is determined by the sprite's current direction.</li> <li><code>turn_cw(angle)</code>: Turns the sprite clockwise by the specified angle in degrees.</li> <li><code>turn_ccw(angle)</code>: Turns the sprite counter-clockwise by the specified angle in degrees.</li> <li><code>goto(x, y)</code>: Moves the sprite to the specified coordinates <code>(x, y)</code>. The coordinates are in World coordinates, not screen coordinates.</li> <li><code>goto(\"mouse\" | sprite)</code>: Moves the sprite to the position of the mouse or another sprite. The sprite can be specified by its name. Example: <code>goto(\"mouse\")</code>, <code>goto(\"player\")</code>.</li> <li><code>glide(x, y, time)</code>: Glides the sprite to the specified coordinates <code>(x, y)</code> over the specified time in seconds. The glide is smooth and takes the specified time to complete.</li> <li><code>glide(x, y, time, \"linear\" | \"ease\" | \"ease-in\" | \"ease-out\" | \"ease-in-out\")</code>: Glides the sprite to the specified coordinates <code>(x, y)</code> over the specified time in seconds with the specified easing function. The easing functions determine how the speed of the glide changes over time.</li> <li><code>point(angle)</code>: Points the sprite in the specified direction in degrees. The angle is relative to the right side of the sprite.</li> <li><code>point(\"mouse\" | sprite)</code>: Points the sprite towards the mouse or another sprite. The sprite can be specified by its name. Example: <code>point(\"mouse\")</code>, <code>point(\"player\")</code>.</li> <li><code>point(x, y)</code>: Points the sprite towards the specified coordinates <code>(x, y)</code>. The coordinates are in World coordinates, not screen coordinates.</li> <li><code>change_x(steps)</code>: Changes the sprite's x-coordinate by the specified number of steps. Positive values move the sprite to the right, negative values move it to the left.</li> <li><code>set_x(x)</code>: Sets the sprite's x-coordinate to the specified value. The value is in World coordinates, not screen coordinates.</li> <li><code>change_y(steps)</code>: Changes the sprite's y-coordinate by the specified number of steps. Positive values move the sprite up, negative values move it down.</li> <li><code>set_y(y)</code>: Sets the sprite's y-coordinate to the specified value. The value is in World coordinates, not screen coordinates.</li> <li><code>edge_bounce(boolean)</code>: Makes the sprite bounce off the edges of the screen. If <code>boolean</code> is <code>true</code>, the sprite will bounce off the edges. If <code>false</code>, the sprite will not bounce off the edges.</li> <li><code>rotation_style(\"all-around\" | \"left-right\" | \"dont-rotate\")</code>: Sets the sprite's rotation style. The rotation style determines how the sprite rotates when it moves. Only visual rotation is affected, not the direction of movement.<ul> <li><code>\"all-around\"</code>: The sprite can rotate in any direction.</li> <li><code>\"left-right\"</code>: The sprite can only rotate left and right.</li> <li><code>\"dont-rotate\"</code>: The sprite does not rotate at all.</li> </ul> </li> <li><code>direction()</code>: Returns the sprite's current direction in degrees. The direction is relative to the right side of the sprite.</li> <li><code>x()</code>: Returns the sprite's current x-coordinate in World coordinates.</li> <li><code>y()</code>: Returns the sprite's current y-coordinate in World coordinates.</li> </ul>"},{"location":"project-setup/","title":"Project Setup","text":"<p>Note</p> <p>The words \"Stage\" and \"Backdrop\" are used interchangeably in Crust.</p> <p>Note</p> <p>As of version 0.3.5, Crust allows you to create projects by writing: <pre><code>crust-engine --new my_project\n</code></pre> This creates a new project with the name <code>my_project</code> in the current directory, and initializes it with a default <code>project.toml</code> with an empty stage and a single sprite named \"default-sprite\".</p> <p>Projects are defined by a <code>project.toml</code> file in the root directory. This file contains metadata about the project, such as allowing debug features, the stages, the sprites and their costumes, etc. Here is an example of a <code>project.toml</code> file:</p> <pre><code>debug_options = [ \"show_fps\", \"show_mouse_pos\" ]\n\n[stage]\nbackdrops = [ \"backdrop_0.png\" ]\n\n[[sprites]]\nname = \"title\"\ncode = \"title/title.crst\"\ncostumes = [ \"title/title.png\" ]\nsounds = []\nx = 0\ny = 200\nw = 1200\nh = 300\n\n[[sprites]]\nname = \"player\"\ncode = \"player/player.crst\"\ncostumes = [ \"player/player.png\" ]\nx = 0\ny = 0\nw = 150\nh = 150\n\n    [[sprites.sounds]]\n    name = \"jump\"\n    file = \"player/jump.wav\"\n</code></pre> <p>The <code>project.toml</code> file is written in TOML format, which is a simple and human-readable configuration file format. You can read more about TOML here.</p>"},{"location":"project-setup/#toml-structure","title":"TOML Structure","text":"<p>All paths mentioned are relative to the <code>project.toml</code> file.</p> <ul> <li><code>debug_options</code>: A list of debug options to enable. Only available options are <code>show_fps</code> and <code>show_mouse_pos</code><ul> <li><code>show_fps</code>: Shows the current frames per second (FPS)</li> <li><code>show_mouse_pos</code>: Shows the current mouse position on the screen (World coordinates, not screen coordinates)</li> </ul> </li> <li><code>vsync</code>: Whether to enable vertical synchronization (VSync). Defaults to <code>true</code>. If set to <code>false</code>, the game will run as fast as possible, which may cause screen tearing.</li> <li><code>[font]</code>: The font configuration. Defaults to the default Crust font.<ul> <li><code>file</code>: The path to the bitmap font file. The file must be an image file.</li> <li><code>first_char</code>: The first character in the font.</li> <li><code>char_width</code>: The width of each character in the font in pixels.</li> <li><code>char_height</code>: The height of each character in the font in pixels.</li> <li><code>chars_per_row</code>: The number of characters in each row of the font.</li> </ul> </li> <li><code>[stage]</code>: The stage configuration<ul> <li><code>backdrops</code>: A list of backdrops for the stage. If the list is empty, the stage will have an empty backdrop</li> </ul> </li> <li><code>[sprites]</code>: A list of sprites in the project<ul> <li><code>[[sprites]]</code>: A sprite<ul> <li><code>name</code>: The name of the sprite. Can have spaces and special characters. Case-sensitive.</li> <li><code>code</code>: The path to the sprite's code file.</li> <li><code>costumes</code>: A list of costumes for the sprite. The costumes are images that the sprite can use. If the list is empty, the sprite will have no costumes.</li> <li><code>[sprites.sounds]</code>: A list of sounds for the sprite<ul> <li><code>[[sprites.sounds]]</code>: A sound<ul> <li><code>name</code>: The name of the sound. Can have spaces and special characters. Case-sensitive.</li> <li><code>file</code>: The path to the sound file. Can only be a <code>.wav</code> file.</li> </ul> </li> </ul> </li> <li><code>x</code>: The x-coordinate of the sprite. Center is 0, left is negative, right is positive.</li> <li><code>y</code>: The y-coordinate of the sprite. Center is 0, up is negative, down is positive.</li> <li><code>w</code>: The width of the sprite in pixels.</li> <li><code>h</code>: The height of the sprite in pixels.</li> <li><code>visible</code>: Whether the sprite is visible. Defaults to <code>true</code>. If set to <code>false</code>, the sprite will not be rendered on the stage.</li> <li><code>layer</code>: The layer of the sprite. Defaults to <code>0</code>. A higher value means the sprite will be rendered on top of sprites with a lower layer value. Also effects the order of the sprite in the sprite list after the first frame.</li> <li><code>direction</code>: The rotation of the sprite in degrees. Defaults to <code>0</code>. A positive value rotates the sprite clockwise, a negative value rotates it counter-clockwise.</li> </ul> </li> </ul> </li> <li><code>[tags]</code>: A list of tags for the project. Tags are used to categorize the sprites. Sprites in tags inherit the tag's code, placing the code after its own code.<ul> <li><code>[[tags]]</code>: A tag<ul> <li><code>name</code>: The name of the tag. Can have spaces and special characters. Case-sensitive. If the name is <code>*</code>, it is a special tag that applies to all sprites in the project, in which case the <code>sprites</code> list is ignored.</li> <li><code>code</code>: The path to the tag's code file. This file will be executed for all sprites in the tag after their own code.</li> <li><code>sprites</code>: A list of sprite names that are in the tag.</li> </ul> </li> </ul> </li> </ul>"},{"location":"project-setup/#recommended-project-structure","title":"Recommended Project Structure","text":"<p>The recommended project structure is as follows:</p> <pre><code>project/\n|-- project.toml\n|-- stages/\n|   |-- backdrop_0.png\n|-- sprites/\n|   |-- sprite/\n|   |   |-- sprite.crst\n|   |   |-- sprite.png\n|   |   |-- sprite.wav\n</code></pre>"},{"location":"run/","title":"Running your Crust Project","text":"<p>If you want to run Crust projects, you need to have the Crust engine installed on your system. You can build it from source or download a pre-built binary from crates.io.</p>"},{"location":"run/#building-crust","title":"Building Crust","text":"<p>Firstly, clone the Crust repository from GitHub:</p> <pre><code>git clone https://github.com/Muhtasim-Rasheed/crust-engine.git\ncd crust-engine\n</code></pre> <p>To build Crust, you need to have the Rust toolchain installed on your system. You can install Rust by following the instructions on the official Rust website.</p> <p>Once you have Rust installed, you can build and install Crust by running the following command in the terminal:</p> <pre><code>cargo install --path .\n</code></pre> <p>This will compile Crust and install it on your system. Make cargo can be found in your PATH, so you can run the <code>crust</code> command from anywhere in your terminal.</p>"},{"location":"run/#running-your-crust-project","title":"Running your Crust Project","text":"<p>Once you have Crust installed, you can run your project using the following command in your terminal:</p> Linux / macOS / Windows (WSL)Windows <pre><code>crust-engine --project path/to/your_project.toml\n</code></pre> <pre><code>crust-engine --project path\\to\\your_project.toml\n</code></pre> <p>Replace the path with the path to your project's <code>project.toml</code> file. This will start the Crust engine and run your project. If you don't mention the path to the <code>project.toml</code> file, Crust will open a file picker dialog for you.</p> <p>For other commands, you can run <code>crust --help</code> or <code>crust -h</code> to see the available options and commands.</p>"},{"location":"screen/","title":"The Screen","text":""},{"location":"screen/#screen-space","title":"Screen Space","text":"<p>The screen is where the game is displayed. The origin (0, 0) is at the top-left corner of the screen. The screen size is determined by the <code>window_width()</code> and <code>window_height()</code> functions. By default, the screen is 1024x576 pixels, but you can change it using the <code>set_window_size(width, height)</code> function (see Window for more details).</p>"},{"location":"screen/#world-space","title":"World Space","text":"<p>The world is where the objects exist. The origin (0, 0) is at the center of the screen. All functions in the Crust Language that take coordinates as arguments use world coordinates, not screen coordinates. The world is infinite, meaning you can move objects anywhere in the world without worrying about boundaries, but, the visible area is only two times the screen size from -1024, -576 to 1024, 576 by default. Right is positive x, up is positive y, left is negative x, down is negative y.</p>"},{"location":"sound/","title":"Sound Functions","text":"<p>The sound functions are used to play and control sounds in the project. They can be used to play sound effects, music, and more. Here is a list of all the sound functions in Crust:</p> <ul> <li><code>play_sound(sound, stop_other_sounds)</code>: Plays the specified sound. The sound is specified by its name in the sounds map of the sprite.</li> <li><code>stop_all_sounds()</code>: Stops all sounds currently playing.</li> <li><code>stop_sound(sound)</code>: Stops the specified sound. The sound is specified by its name in the sounds map of the sprite.</li> <li><code>change_sound_filter(filter, increment)</code>: Changes the specified sound filter by the specified increment.</li> <li><code>set_sound_filter(filter, value)</code>: Sets the specified sound filter to the specified value.</li> <li><code>sound_filter(filter)</code>: Returns the current value of the specified sound filter. The filter can be one of the valid filters listed below.</li> </ul>"},{"location":"sound/#filters","title":"Filters","text":"<p>All the valid sound filters that can be used are:</p> <ul> <li><code>\"volume\"</code>: Changes the volume of the sound (0 - 100).</li> <li><code>\"pitch\"</code>: Changes the pitch of the sound (0 - 100).</li> <li><code>\"pan\"</code>: Changes the stereo panning of the sound (0 - 100, where 0 is left, 50 is center, and 100 is right).</li> </ul>"},{"location":"window/","title":"Window Functions","text":"<p>The window functions are used to control the window's size, position, and state in the application. These functions allow you to customize the appearance of the window and how it interacts with the user. Here is a list of all the window functions in Crust:</p> <ul> <li><code>set_window_width(width)</code>: Sets the width of the window to the specified value in pixels.</li> <li><code>set_window_height(height)</code>: Sets the height of the window to the specified value in pixels.</li> <li><code>set_window_size(width, height)</code>: Sets the size of the window to the specified width and height in pixels.</li> <li><code>set_window_state(state)</code>: Sets the state of the window to the specified state. The state can be one of the following:</li> <li><code>\"normal\"</code>: The window is in normal state.</li> <li><code>\"fullscreen\"</code>: The window is in fullscreen mode.</li> <li><code>set_window_x(x)</code>: Sets the x-coordinate of the window's position on the screen.</li> <li><code>set_window_y(y)</code>: Sets the y-coordinate of the window's position on the screen.</li> <li><code>set_window_position(x, y)</code>: Sets the position of the window on the screen to the specified x and y coordinates.</li> <li><code>pointer_grab(bool)</code>: Sets whether the pointer (mouse cursor) is grabbed by the window. If <code>true</code>, the pointer is confined to the window; if <code>false</code>, it can move freely. This also affects the visibility of the pointer.</li> <li><code>window_width()</code>: Returns the current width of the window in pixels.</li> <li><code>window_height()</code>: Returns the current height of the window in pixels.</li> </ul>"}]}